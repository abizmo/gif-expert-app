{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","addCategory","useState","category","setCategory","onSubmit","evt","preventDefault","trim","length","categories","type","onChange","target","value","getGifs","a","url","process","fetch","resp","json","data","gifs","map","gif","id","username","title","img","images","downsized_large","useFetchGifs","setGifs","loading","setLoading","useEffect","then","catch","console","error","finally","GifGridItem","className","src","alt","GifGrid","initialState","GifExpertApp","setCategories","ReactDOM","render","document","getElementById"],"mappings":"yMA8BeA,EA3BK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrB,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAWA,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAIC,iBAEAJ,EAASK,OAAOC,OAAS,IAC3BR,GAAY,SAAAS,GAAU,OAAMP,GAAN,mBAAmBO,OACzCN,EAAY,MAKd,SACE,uBACEO,KAAK,OACLC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBT,EAAYS,EAAOC,QAC7CA,MAAOX,O,+BCJAY,EAdF,uCAAG,WAAOZ,GAAP,uBAAAa,EAAA,6DACRC,EADQ,iDACyCd,EADzC,6BAFMe,oCAEN,SAEKC,MAAMF,GAFX,cAERG,EAFQ,gBAGSA,EAAKC,OAHd,uBAGNC,EAHM,EAGNA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,MAAK,CAC5BC,GAAID,EAAIC,GACRC,SAAUF,EAAIE,SACdC,MAAOH,EAAIG,MACXC,IAAKJ,EAAIK,OAAOC,gBAAgBd,QARpB,kBAWPM,GAXO,4CAAH,sDCeES,EAdM,SAAC7B,GACpB,MAAwBD,mBAAS,IAAjC,mBAAOqB,EAAP,KAAaU,EAAb,KACA,EAA8B/B,oBAAS,GAAvC,mBAAOgC,EAAP,KAAgBC,EAAhB,KASA,OAPAC,qBAAU,WACRrB,EAASZ,GACNkC,KAAKJ,GACLK,MAAMC,QAAQC,OACdC,SAAQ,kBAAMN,GAAW,QAC3B,CAAEhC,IAEE,CAACoB,EAAMW,ICODQ,EAlBK,SAAC,GAA8B,IAA5Bb,EAA2B,EAA3BA,IAAKD,EAAsB,EAAtBA,MAAOD,EAAe,EAAfA,SACjC,OACE,sBAAKgB,UAAU,mDAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKjB,IACpB,sBAAKe,UAAU,OAAf,UACE,6BAAKf,IACL,4BAAID,WCuBGmB,EA3BC,SAAC,GAAkB,IAAhB3C,EAAe,EAAfA,SACjB,EAA0B6B,EAAa7B,GAAvC,mBAAQoB,EAAR,KAAcW,EAAd,KAEA,OACE,gCACE,6BAAM/B,IAEJ+B,GAAW,mBAAGS,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEIpB,EAAKC,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEOA,GADAA,EAAIC,aCdjBqB,EAAe,CAAC,QAqBPC,EAnBM,WACnB,MAAoC9C,mBAAS6C,GAA7C,mBAAOrC,EAAP,KAAmBuC,EAAnB,KAEA,OACE,gCACE,8CACA,cAAC,EAAD,CAAahD,YAAagD,IAC1B,uBACA,6BAEIvC,EAAWc,KAAI,SAAArB,GAAQ,OACrB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCX1B+C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.519a4395.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ addCategory }) => {\n  const [category, setCategory] = useState('')\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    if (category.trim().length > 2) {\n      addCategory(categories => [ category, ...categories ])\n      setCategory('');\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input \n        type=\"text\"\n        onChange={({ target }) => setCategory(target.value)}\n        value={category}\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  addCategory: PropTypes.func.isRequired,\n}\n\nexport default AddCategory\n","const GIPHY_API_KEY = process.env.REACT_APP_GIPHY_API_KEY\n\nconst getGifs = async( category ) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ category }&limit=10&api_key=${GIPHY_API_KEY}`\n  const resp = await fetch(url)\n  const { data } = await resp.json()\n  const gifs = data.map(gif => ({\n    id: gif.id,\n    username: gif.username,\n    title: gif.title,\n    img: gif.images.downsized_large.url,\n  }))\n\n  return gifs;\n}\n\nexport default getGifs;\n","import { useEffect, useState } from \"react\";\n\nimport getGifs from '../helpers/getGifs'\nconst useFetchGifs = (category) => {\n  const [gifs, setGifs] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    getGifs( category )\n      .then(setGifs)\n      .catch(console.error)\n      .finally(() => setLoading(false))\n  }, [ category ])\n\n  return [gifs, loading];\n}\n\nexport default useFetchGifs;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst GifGridItem = ({ img, title, username }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeInBottomLeft\">\n      <img src={img} alt={title} />\n      <div className=\"info\">\n        <h5>{title}</h5>\n        <p>{username}</p>\n      </div>\n    </div>\n  )\n}\n\nGifGridItem.propTypes = {\n  img: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  username: PropTypes.string.isRequired,\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport useFetchGifs from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem'\n\nconst GifGrid = ({ category }) => {\n  const [ gifs, loading ] = useFetchGifs(category);\n\n  return (\n    <div>\n      <h3>{ category }</h3>\n\n      { loading && <p className=\"animate__animated animate__pulse\">Loading...</p>}\n\n      <div className=\"card-grid\">\n        {\n          gifs.map((gif) => (\n            <GifGridItem\n              key={gif.id}\n              { ...gif }\n            />\n          ))\n        }\n      </div>\n    </div>\n  )\n}\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n}\n\nexport default GifGrid\n","import React, {useState} from 'react'\n\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\nconst initialState = ['fail']\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(initialState)\n\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <AddCategory addCategory={setCategories} />\n      <hr />\n      <ol>\n        { \n          categories.map(category => (\n            <GifGrid key={category} category={category} />\n          ))\n        }\n      </ol>\n    </div>\n  )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}